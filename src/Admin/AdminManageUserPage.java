
package Admin;

import java.awt.Color;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.DefaultComboBoxModel;

public class AdminManageUserPage extends javax.swing.JFrame {

    private final String SEARCH_PLACEHOLDER = "UserID / Name";
    private final String PASSWORD_PLACEHOLDER = "Confirm New Password";
    private final Color  PLACEHOLDER_COLOR = Color.GRAY;
    private final Color  NORMAL_TEXT_COLOR = Color.BLACK;
    
    private final String filename = "User.txt";
    private String uname;
    
    public AdminManageUserPage(String uname) {
        initComponents();
        this.uname = uname;
        initPlaceholder();
        initDetailFieldsLocked(); 
        initButtonStates(); 
        roleCmbBox.setModel(new DefaultComboBoxModel<>(Admin.Role.values()));
        roleCmbBox.setSelectedIndex(-1);
        
        searchIDNameTxtBox.setFocusable(false);
        searchIDNameTxtBox.setFocusable(false);
        searchIDNameTxtBox.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent e) {
                searchIDNameTxtBox.setFocusable(true);
                searchIDNameTxtBox.requestFocusInWindow();
            }
        });
    }
    
    private void initPlaceholder() {
        searchIDNameTxtBox.setText(SEARCH_PLACEHOLDER);
        confirmPasswordTxtBox.setText(PASSWORD_PLACEHOLDER);
        searchIDNameTxtBox.setForeground(PLACEHOLDER_COLOR);
        confirmPasswordTxtBox.setForeground(PLACEHOLDER_COLOR);

        searchIDNameTxtBox.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (searchIDNameTxtBox.getText().equals(SEARCH_PLACEHOLDER)) {
                    searchIDNameTxtBox.setText("");
                    searchIDNameTxtBox.setForeground(NORMAL_TEXT_COLOR);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (searchIDNameTxtBox.getText().isEmpty()) {
                    searchIDNameTxtBox.setText(SEARCH_PLACEHOLDER);
                    searchIDNameTxtBox.setForeground(PLACEHOLDER_COLOR);
                }
            }
        });
            confirmPasswordTxtBox.addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (confirmPasswordTxtBox.getText().equals(PASSWORD_PLACEHOLDER)) {
                    confirmPasswordTxtBox.setText("");
                    confirmPasswordTxtBox.setForeground(NORMAL_TEXT_COLOR);
                }
            }

            @Override
            public void focusLost(FocusEvent e) {
                if (confirmPasswordTxtBox.getText().isEmpty()) {
                    confirmPasswordTxtBox.setText(PASSWORD_PLACEHOLDER);
                    confirmPasswordTxtBox.setForeground(PLACEHOLDER_COLOR);
                }
            }
        });
    }
    
    private void initDetailFieldsLocked() {
    userIDTxtBox.setEditable(false);
    nameTxtBox.setEditable(false);
    emailTxtBox.setEditable(false);
    roleCmbBox.setEnabled(false);
    passwordTxtBox.setEditable(false);
    changePasswordRadioButton.setEnabled(false);
    confirmPasswordTxtBox.setEditable(false);
    }

    private void initButtonStates() {
    editButton.setEnabled(false);
    deleteButton.setEnabled(false);
    saveButton.setEnabled(false);
    }
    
    private void clearDetailFields() {
    userIDTxtBox.setText("");
    nameTxtBox.setText("");
    emailTxtBox.setText("");
    roleCmbBox.setSelectedIndex(-1);
    passwordTxtBox.setText("");
    changePasswordRadioButton.setSelected(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jLabel4 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        searchIDNameTxtBox = new javax.swing.JTextField();
        searchUserBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        roleCmbBox = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        userIDTxtBox = new javax.swing.JTextField();
        nameTxtBox = new javax.swing.JTextField();
        emailTxtBox = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        passwordTxtBox = new javax.swing.JTextField();
        changePasswordRadioButton = new javax.swing.JRadioButton();
        confirmPasswordTxtBox = new javax.swing.JTextField();
        editButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        addUserLabelBtn = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        jToggleButton1.setText("jToggleButton1");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jLabel4.setText("jLabel4");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jLabel11.setText("jLabel11");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Admin Manage User");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("OWSB Admin - Manage Users");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel3.setText("Search User ID or Name:");

        searchIDNameTxtBox.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        searchUserBtn.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        searchUserBtn.setText("Search >");
        searchUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchUserBtnActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 12))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel5.setText("User ID:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel6.setText("Name:");

        jLabel7.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel7.setText("Email:");

        roleCmbBox.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        roleCmbBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleCmbBoxActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel8.setText("Role:");

        userIDTxtBox.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        nameTxtBox.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        emailTxtBox.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel9.setText("Password:");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel10.setText("Confirm Password:");

        passwordTxtBox.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        changePasswordRadioButton.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        changePasswordRadioButton.setText("Change Password");
        changePasswordRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordRadioButtonActionPerformed(evt);
            }
        });

        confirmPasswordTxtBox.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N

        editButton.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        editButton.setText("Edit >");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        deleteButton.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        deleteButton.setText("Delete >");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        saveButton.setText("Save >");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(15, 15, 15)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(nameTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(emailTxtBox))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(roleCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(userIDTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(changePasswordRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(passwordTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(confirmPasswordTxtBox))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(userIDTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(nameTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(emailTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(roleCmbBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(changePasswordRadioButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(confirmPasswordTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(saveButton))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        addUserLabelBtn.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        addUserLabelBtn.setForeground(new java.awt.Color(0, 51, 255));
        addUserLabelBtn.setText("<html><u>Add User ></u></html> ");
        addUserLabelBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addUserLabelBtnMouseClicked(evt);
            }
        });

        resetButton.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        backButton.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        backButton.setText("< Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchIDNameTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(backButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(55, 55, 55)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(196, 196, 196)
                                        .addComponent(resetButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchUserBtn))
                                    .addComponent(addUserLabelBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(71, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(192, 192, 192)
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(searchIDNameTxtBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchUserBtn)
                            .addComponent(resetButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(addUserLabelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchUserBtnActionPerformed
        String typed = searchIDNameTxtBox.getText().trim();
        
        if (typed.isEmpty() || typed.equals(SEARCH_PLACEHOLDER)) {
            JOptionPane.showMessageDialog(this,
                "Please enter a valid User ID or Name to search.",
                "Input Required",
                JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        boolean found = false;
        try (BufferedReader br = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = br.readLine()) != null) {
                Admin fileUser;
                try {
                    fileUser = new Admin(line);
                } catch (IllegalArgumentException iae) {
                    continue;
                }

                if (fileUser.getUserID().equalsIgnoreCase(typed) || fileUser.getName().equalsIgnoreCase(typed)) {

                    userIDTxtBox.setText(fileUser.getUserID());
                    nameTxtBox.setText(fileUser.getName());
                    emailTxtBox.setText(fileUser.getEmail());
                    roleCmbBox.setSelectedItem(fileUser.getRole());
                    passwordTxtBox.setText(fileUser.getPassword());

                    initDetailFieldsLocked();
                    editButton.setEnabled(true);
                    deleteButton.setEnabled(true);
                    saveButton.setEnabled(false);
                    found = true;
                    break;
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                "Error reading user.txt: " + ex.getMessage(),
                "Read Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!found) {
            JOptionPane.showMessageDialog(this,
                "No matching user found for \"" + typed + "\".",
                "User Not Found",
                JOptionPane.WARNING_MESSAGE);
            clearDetailFields();
            initButtonStates();
        }
    }//GEN-LAST:event_searchUserBtnActionPerformed

    private void changePasswordRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordRadioButtonActionPerformed
        if (changePasswordRadioButton.isSelected()) {
        passwordTxtBox.setEditable(true);
        confirmPasswordTxtBox.setEditable(true);
        } 
    }//GEN-LAST:event_changePasswordRadioButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        nameTxtBox.setEditable(true);
        emailTxtBox.setEditable(true);
        roleCmbBox.setEnabled(true);
        changePasswordRadioButton.setEnabled(true);
        
        saveButton.setEnabled(true);
        deleteButton.setEnabled(false);
    }//GEN-LAST:event_editButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        new AdminMainPage(uname).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void roleCmbBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleCmbBoxActionPerformed

    }//GEN-LAST:event_roleCmbBoxActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed

        searchIDNameTxtBox.setText(SEARCH_PLACEHOLDER);
        searchIDNameTxtBox.setForeground(PLACEHOLDER_COLOR);

        userIDTxtBox.setText("");
        nameTxtBox.setText("");
        emailTxtBox.setText("");
        roleCmbBox.setSelectedIndex(0);
        passwordTxtBox.setText("");
        changePasswordRadioButton.setSelected(false);
        roleCmbBox.setSelectedIndex(-1);
        confirmPasswordTxtBox.setText("");
        
        initDetailFieldsLocked();
        initButtonStates();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void addUserLabelBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addUserLabelBtnMouseClicked
        AdminAddUserPage AddUserPage = new AdminAddUserPage(uname);
        AddUserPage.setVisible(true);
        this.dispose(); 
    }//GEN-LAST:event_addUserLabelBtnMouseClicked

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String uid   = userIDTxtBox.getText().trim();
        String uname = nameTxtBox.getText().trim();
        String email = emailTxtBox.getText().trim();
        Admin.Role role = (Admin.Role) roleCmbBox.getSelectedItem();
        String pwd   = passwordTxtBox.getText();
        String confirmpwd = confirmPasswordTxtBox.getText();
        
        if (uid.isEmpty() || uname.isEmpty() || email.isEmpty() || pwd.isEmpty()) {
            JOptionPane.showMessageDialog(this, "All fields must be filled in before saving.","Missing Information",JOptionPane.WARNING_MESSAGE);
        return;
        }
        if (changePasswordRadioButton.isSelected()) {
            if (confirmpwd.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                    "Confirm Password cannot be empty.",
                    "Password Required",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (!confirmpwd.equals(pwd)) {
                JOptionPane.showMessageDialog(this,
                    "Password and Confirm Password must match.",
                    "Password Mismatch",
                    JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        
        Admin updatedUser = new Admin(uid, uname, email, role, pwd);

        int resp = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to save these changes for user \"" + uid + "\"?",
            "Confirm Update",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE
        );
        if (resp != JOptionPane.YES_OPTION) {
            return;
        }
        
        java.util.List<String> lines = new java.util.ArrayList<>();
        boolean updated = false;
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Admin fileUser;
                try {
                    fileUser = new Admin(line);
                } catch (IllegalArgumentException iae) {
                    // Malformed: keep the line as-is
                    lines.add(line);
                    continue;
                }
                if (fileUser.getUserID().equalsIgnoreCase(uid)) {
                    // Replace this line with the updatedUser’s CSV
                    lines.add(updatedUser.toCSVLine());
                    updated = true;
                } else {
                    lines.add(line);
                }
            }
        } catch (IOException ioe) {
        JOptionPane.showMessageDialog(this,
            "Error reading user file: " + ioe.getMessage(),
            "I/O Error",
            JOptionPane.ERROR_MESSAGE);
        return;
        }

        if (!updated) {
            JOptionPane.showMessageDialog(this,
                "User \"" + uid + "\" not found for update.",
                "Update Error",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filename, false))) {
            for (String outLine : lines) {
                bw.write(outLine);
                bw.newLine();
            }
            JOptionPane.showMessageDialog(this,
                "User \"" + uid + "\" updated successfully.",
                "User Updated",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(this,
                "Error writing to user file: " + ioe.getMessage(),
                "I/O Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        initDetailFieldsLocked();
        saveButton.setEnabled(false);
        editButton.setEnabled(true);
        deleteButton.setEnabled(true);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        String uid = userIDTxtBox.getText().trim();
        if (uid.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No user loaded to delete.","Delete Error",JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete user \"" + uid + "\"?",
            "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }       
        
        java.util.List<String> lines = new java.util.ArrayList<>();
        boolean deleted = false;
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = reader.readLine()) != null) {
                Admin fileUser;
                try {
                    fileUser = new Admin(line);
                } catch (IllegalArgumentException iae) {
                    lines.add(line);
                    continue;
                }

                if (fileUser.getUserID().equalsIgnoreCase(uid)) {
                    deleted = true;
                } else {
                    lines.add(line);
                }
            }
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(this,
                "Error reading user file: " + ioe.getMessage(),
                "Delete Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (!deleted) {
            JOptionPane.showMessageDialog(this,
                "User \"" + uid + "\" not found for deletion.",
                "Delete Error",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

    // Overwrite the file without the deleted user
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filename, false))) {
            for (String outLine : lines) {
                bw.write(outLine);
                bw.newLine();
            }
            JOptionPane.showMessageDialog(this,
                "Deleted user \"" + uid + "\".",
                "Deleted",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(this,
                "Error writing user file: " + ioe.getMessage(),
                "Delete Error",
                JOptionPane.ERROR_MESSAGE);
        }

        resetButtonActionPerformed(null);
    }//GEN-LAST:event_deleteButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addUserLabelBtn;
    private javax.swing.JButton backButton;
    private javax.swing.JRadioButton changePasswordRadioButton;
    private javax.swing.JTextField confirmPasswordTxtBox;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField emailTxtBox;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField nameTxtBox;
    private javax.swing.JTextField passwordTxtBox;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox<Admin.Role> roleCmbBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextField searchIDNameTxtBox;
    private javax.swing.JButton searchUserBtn;
    private javax.swing.JTextField userIDTxtBox;
    // End of variables declaration//GEN-END:variables
}
